name: publish-release

on:
  push:
    branches: ['main', 'develop']
    paths:
      - 'short_urls/**'
      - '.github/workflows/*.yml'
      - 'Dockerfile'
      - '.dockerignore'
      - '.gitignore'
      - 'requirements.txt'
      - 'short_urls_run.sh'
  pull_request:
    branches: ['main', 'develop']
    paths:
      - 'short_urls/**'
      - '.github/workflows/*.yml'
      - 'Dockerfile'
      - '.dockerignore'
      - '.gitignore'
      - 'requirements.txt'
      - 'short_urls_run.sh'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_push:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"
      - name: Set variable for branch main
        # if: ${{ contains(['master', 'main'], github.ref) }}
        if: github.event.ref == 'refs/heads/main'
        run: echo "LABEL=latest" >> $GITHUB_ENV && echo "Variable set LABEL=latest."
      - name: Set variable for branch develop
        # if: ${{ contains(['master', 'main'], github.ref) }}
        if: github.event.ref == 'refs/heads/develop'
        run: echo "LABEL=test" >> $GITHUB_ENV && echo "Variable set LABEL=test."
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out the repo
        uses: actions/checkout@v4
        #with:
          #ref: 'master'
          # fetch-depth: 0 # fetch all history so multiple commits can be scanned
      # - name: TEST keycloak.json
        # run: |
          # cat ./public/keycloak.json
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Push to Docker Hub
        # uses: docker/build-push-action@v2
        # with:
          # context: .
          # push: true
          # tags: devasteam/deva-crm:latest
          # pull: true
      - name: Build the latest Docker image
        run: docker build . --cache-from ministrbob/short-urls:$LABEL --build-arg BUILDKIT_INLINE_CACHE=1 --file Dockerfile --tag ministrbob/short-urls:$LABEL
      - name: Push the latest Docker image
        run: docker push ministrbob/short-urls:$LABEL
      - name: Upload short_urls_run.sh
        uses: actions/upload-artifact@v3
        with:
          name: sh_file
          path: short_urls_run.sh

  deploy_to_test:
    name: Deploy to test environment
    if: github.event.ref == 'refs/heads/develop'
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
#      - name: DEBUG secrets
#        env:
#          SSH_USER: ${{ secrets.TEST_SSH_USER }}
#          SSH_KEY: ${{ secrets.TEST_SSH_PRIVATE_KEY }}
#          SSH_HOST: ${{ secrets.TEST_SSH_HOST }}
#          SSH_PORT: ${{ secrets.TEST_SSH_PORT }}
#        run: |
#          import os
#          for q in (os.getenv("SSH_HOST")):
#            print(q)
#          for q in (os.getenv("SSH_PORT")):
#            print(q)
#          for q in (os.getenv("SSH_USER")):
#            print(q)
#          for q in (os.getenv("SSH_KEY").replace("\\n", "  ")):
#            print(q)
#        shell: python
      - name: Configure test SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/test.key
          chmod 600 ~/.ssh/test.key
          cat >>~/.ssh/config <<END
          Host test
            HostName $SSH_HOST
            Port $SSH_PORT
            User $SSH_USER
            IdentityFile ~/.ssh/test.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.TEST_SSH_USER }}
          SSH_KEY: ${{ secrets.TEST_SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.TEST_SSH_HOST }}
          SSH_PORT: ${{ secrets.TEST_SSH_PORT }}
      - name: Download short_urls_run.sh
        uses: actions/download-artifact@v3
        with:
          name: sh_file
# result pwd = /home/runner/work/short-urls/short-urls
#      - name: pwd
#        run: pwd
#      - name: ls -al
#        run: ls -al
#      - name: Test ssh
#        run: ssh -vvv test
      - name: Copy short_urls_run.sh
        run: scp short_urls_run.sh test:/home/dr/short_urls_run.sh
      - name: Execute short_urls_run.sh
        run: ssh test '/home/dr/short_urls_run.sh'

  deploy_to_prod:
    name: Deploy to prod environment
    if: github.event.ref == 'refs/heads/main'
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Configure prod SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/prod.key
          chmod 600 ~/.ssh/prod.key
          cat >>~/.ssh/config <<END
          Host prod
            HostName $SSH_HOST
            Port $SSH_PORT
            User $SSH_USER
            IdentityFile ~/.ssh/prod.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
      - name: Download short_urls_run.sh
        uses: actions/download-artifact@v4
        with:
          name: sh_file
# result pwd = /home/runner/work/short-urls/short-urls
#      - name: pwd
#        run: pwd
#      - name: ls -al
#        run: ls -al
#      - name: Test ssh
#        run: ssh -vvv test
      - name: Copy short_urls_run.sh
        run: scp short_urls_run.sh prod:/home/dr/short_urls_run.sh
      - name: Execute short_urls_run.sh
        run: ssh prod '/home/dr/short_urls_run.sh'
